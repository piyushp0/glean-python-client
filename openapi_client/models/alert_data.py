# coding: utf-8

"""
    Glean Client API

    # Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions.  # SDK Client bindings for the API can be generated for most popular languages (Python, Java, NodeJS, etc). To do so:  Download the OpenAPI specification for the API, by clicking on one of the following options: 1. [Download JSON specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.json?branch=main&download=true) 2. [Download YAML specification](https://api.redocly.com/registry/bundle/glean/Glean%20Client%20API%20SDK%20source/v1/openapi.yaml?branch=main&download=true)  Use [openapi-generator-cli](https://github.com/OpenAPITools/openapi-generator-cli) to generate bindings for your language of choice, for example: ```bash shell $ npx @openapitools/openapi-generator-cli@latest generate -i client_api.yaml -g go ```  To see available languages: ```bash shell $ npx @openapitools/openapi-generator-cli@latest list ```  Determine the host you need to connect to. This will be the URL of the backend for your Glean deployment, for example, customer-be.glean.com 

    The version of the OpenAPI document: 0.9.0
    Contact: support@glean.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resolution_step import ResolutionStep
from typing import Optional, Set
from typing_extensions import Self

class AlertData(BaseModel):
    """
    Admin alert related information that is used to construct the admin alert email
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the admin alert")
    triggered_time: Optional[datetime] = Field(default=None, description="The time that the alert was triggered", alias="triggeredTime")
    project_name: Optional[StrictStr] = Field(default=None, description="Human readable name of the project instance", alias="projectName")
    help_link: Optional[StrictStr] = Field(default=None, description="Help link for the alert that the admin can reference", alias="helpLink")
    datasource: Optional[StrictStr] = Field(default=None, description="Datasource that the alert is related to (possibly null)")
    banner_type: Optional[StrictStr] = Field(default=None, description="Banner type to display for this alert", alias="bannerType")
    banner_text: Optional[StrictStr] = Field(default=None, description="Text to display for the alert banner", alias="bannerText")
    alert_description: Optional[StrictStr] = Field(default=None, description="Text for what happened section of an admin alert.", alias="alertDescription")
    relevance_description: Optional[StrictStr] = Field(default=None, description="Text for why this matters section of an admin alert.", alias="relevanceDescription")
    resolution_steps_description: Optional[StrictStr] = Field(default=None, description="Text for to do section before actual steps.", alias="resolutionStepsDescription")
    resolution_steps: Optional[List[ResolutionStep]] = Field(default=None, description="Steps to take to resolve an alert which are optionally mapped to a link for instructions (e.g. help doc)", alias="resolutionSteps")
    instance_display_name: Optional[StrictStr] = Field(default=None, description="datasource instance's user set display name", alias="instanceDisplayName")
    instance_name: Optional[StrictStr] = Field(default=None, description="datasource instance's name e.g. confluence_0a0odwv", alias="instanceName")
    email_subject_description: Optional[StrictStr] = Field(default=None, description="custom text in subject line", alias="emailSubjectDescription")
    __properties: ClassVar[List[str]] = ["name", "triggeredTime", "projectName", "helpLink", "datasource", "bannerType", "bannerText", "alertDescription", "relevanceDescription", "resolutionStepsDescription", "resolutionSteps", "instanceDisplayName", "instanceName", "emailSubjectDescription"]

    @field_validator('banner_type')
    def banner_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_REQUIRED', 'REVIEW_REQUIRED']):
            raise ValueError("must be one of enum values ('ACTION_REQUIRED', 'REVIEW_REQUIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlertData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resolution_steps (list)
        _items = []
        if self.resolution_steps:
            for _item in self.resolution_steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['resolutionSteps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlertData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "triggeredTime": obj.get("triggeredTime"),
            "projectName": obj.get("projectName"),
            "helpLink": obj.get("helpLink"),
            "datasource": obj.get("datasource"),
            "bannerType": obj.get("bannerType"),
            "bannerText": obj.get("bannerText"),
            "alertDescription": obj.get("alertDescription"),
            "relevanceDescription": obj.get("relevanceDescription"),
            "resolutionStepsDescription": obj.get("resolutionStepsDescription"),
            "resolutionSteps": [ResolutionStep.from_dict(_item) for _item in obj["resolutionSteps"]] if obj.get("resolutionSteps") is not None else None,
            "instanceDisplayName": obj.get("instanceDisplayName"),
            "instanceName": obj.get("instanceName"),
            "emailSubjectDescription": obj.get("emailSubjectDescription")
        })
        return _obj


